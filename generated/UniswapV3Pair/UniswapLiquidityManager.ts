// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Collect extends ethereum.Event {
  get params(): Collect__Params {
    return new Collect__Params(this);
  }
}

export class Collect__Params {
  _event: Collect;

  constructor(event: Collect) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get userAmount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get userAmount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get indexAmount0(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get indexAmount1(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get pilotAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get pool(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fee(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get sqrtPriceX96(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PoolReajusted extends ethereum.Event {
  get params(): PoolReajusted__Params {
    return new PoolReajusted__Params(this);
  }
}

export class PoolReajusted__Params {
  _event: PoolReajusted;

  constructor(event: PoolReajusted) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseLiquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rangeLiquidity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newBaseTickLower(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get newBaseTickUpper(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get newRangeTickLower(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get newRangeTickUpper(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UniswapLiquidityManager__getReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class UniswapLiquidityManager__getTotalAmountsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class UniswapLiquidityManager__getUserFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class UniswapLiquidityManager__liquidityPositionsResult {
  value0: i32;
  value1: i32;
  value2: BigInt;
  value3: i32;
  value4: i32;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: BigInt,
    value3: i32,
    value4: i32,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromI32(this.value3));
    map.set("value4", ethereum.Value.fromI32(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class UniswapLiquidityManager__positionsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class UniswapLiquidityManager__updatePositionTotalAmountsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class UniswapLiquidityManager extends ethereum.SmartContract {
  static bind(address: Address): UniswapLiquidityManager {
    return new UniswapLiquidityManager("UniswapLiquidityManager", address);
  }

  addressToNftId(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "addressToNftId",
      "addressToNftId(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_addressToNftId(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToNftId",
      "addressToNftId(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createPair(_token0: Address, _token1: Address, data: Bytes): Address {
    let result = super.call(
      "createPair",
      "createPair(address,address,bytes):(address)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toAddress();
  }

  try_createPair(
    _token0: Address,
    _token1: Address,
    data: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPair",
      "createPair(address,address,bytes):(address)",
      [
        ethereum.Value.fromAddress(_token0),
        ethereum.Value.fromAddress(_token1),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserves(
    token0: Address,
    token1: Address,
    data: Bytes
  ): UniswapLiquidityManager__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves(address,address,bytes):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new UniswapLiquidityManager__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getReserves(
    token0: Address,
    token1: Address,
    data: Bytes
  ): ethereum.CallResult<UniswapLiquidityManager__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves(address,address,bytes):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapLiquidityManager__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTotalAmounts(
    pool: Address
  ): UniswapLiquidityManager__getTotalAmountsResult {
    let result = super.call(
      "getTotalAmounts",
      "getTotalAmounts(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(pool)]
    );

    return new UniswapLiquidityManager__getTotalAmountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getTotalAmounts(
    pool: Address
  ): ethereum.CallResult<UniswapLiquidityManager__getTotalAmountsResult> {
    let result = super.tryCall(
      "getTotalAmounts",
      "getTotalAmounts(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapLiquidityManager__getTotalAmountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getUserFees(tokenId: BigInt): UniswapLiquidityManager__getUserFeesResult {
    let result = super.call(
      "getUserFees",
      "getUserFees(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new UniswapLiquidityManager__getUserFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserFees(
    tokenId: BigInt
  ): ethereum.CallResult<UniswapLiquidityManager__getUserFeesResult> {
    let result = super.tryCall(
      "getUserFees",
      "getUserFees(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapLiquidityManager__getUserFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  liquidityPositions(
    param0: Address
  ): UniswapLiquidityManager__liquidityPositionsResult {
    let result = super.call(
      "liquidityPositions",
      "liquidityPositions(address):(int24,int24,uint128,int24,int24,uint128,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new UniswapLiquidityManager__liquidityPositionsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_liquidityPositions(
    param0: Address
  ): ethereum.CallResult<UniswapLiquidityManager__liquidityPositionsResult> {
    let result = super.tryCall(
      "liquidityPositions",
      "liquidityPositions(address):(int24,int24,uint128,int24,int24,uint128,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapLiquidityManager__liquidityPositionsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  positions(param0: BigInt): UniswapLiquidityManager__positionsResult {
    let result = super.call(
      "positions",
      "positions(uint256):(uint256,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new UniswapLiquidityManager__positionsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_positions(
    param0: BigInt
  ): ethereum.CallResult<UniswapLiquidityManager__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(uint256):(uint256,address,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapLiquidityManager__positionsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  readjustFrequencyStatus(pool: Address): boolean {
    let result = super.call(
      "readjustFrequencyStatus",
      "readjustFrequencyStatus(address):(bool)",
      [ethereum.Value.fromAddress(pool)]
    );

    return result[0].toBoolean();
  }

  try_readjustFrequencyStatus(pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "readjustFrequencyStatus",
      "readjustFrequencyStatus(address):(bool)",
      [ethereum.Value.fromAddress(pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updatePositionTotalAmounts(
    _pool: Address
  ): UniswapLiquidityManager__updatePositionTotalAmountsResult {
    let result = super.call(
      "updatePositionTotalAmounts",
      "updatePositionTotalAmounts(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return new UniswapLiquidityManager__updatePositionTotalAmountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_updatePositionTotalAmounts(
    _pool: Address
  ): ethereum.CallResult<
    UniswapLiquidityManager__updatePositionTotalAmountsResult
  > {
    let result = super.tryCall(
      "updatePositionTotalAmounts",
      "updatePositionTotalAmounts(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapLiquidityManager__updatePositionTotalAmountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get oracle_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ulmState_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get indexFund_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get uniStrategy_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get unipilotAddress_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get pilotToken(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get wethToken(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class CreatePairCall extends ethereum.Call {
  get inputs(): CreatePairCall__Inputs {
    return new CreatePairCall__Inputs(this);
  }

  get outputs(): CreatePairCall__Outputs {
    return new CreatePairCall__Outputs(this);
  }
}

export class CreatePairCall__Inputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CreatePairCall__Outputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount0Desired(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount1Desired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get shares(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount0Base(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1Base(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amount0Range(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get amount1Range(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get mintedTokenId(): BigInt {
    return this._call.outputValues[4].value.toBigInt();
  }
}

export class GetReservesCall extends ethereum.Call {
  get inputs(): GetReservesCall__Inputs {
    return new GetReservesCall__Inputs(this);
  }

  get outputs(): GetReservesCall__Outputs {
    return new GetReservesCall__Outputs(this);
  }
}

export class GetReservesCall__Inputs {
  _call: GetReservesCall;

  constructor(call: GetReservesCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class GetReservesCall__Outputs {
  _call: GetReservesCall;

  constructor(call: GetReservesCall) {
    this._call = call;
  }

  get totalAmount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get totalAmount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get totalLiquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class GetUserFeesCall extends ethereum.Call {
  get inputs(): GetUserFeesCall__Inputs {
    return new GetUserFeesCall__Inputs(this);
  }

  get outputs(): GetUserFeesCall__Outputs {
    return new GetUserFeesCall__Outputs(this);
  }
}

export class GetUserFeesCall__Inputs {
  _call: GetUserFeesCall;

  constructor(call: GetUserFeesCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetUserFeesCall__Outputs {
  _call: GetUserFeesCall;

  constructor(call: GetUserFeesCall) {
    this._call = call;
  }

  get fees0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ReadjustFrequencyStatusCall extends ethereum.Call {
  get inputs(): ReadjustFrequencyStatusCall__Inputs {
    return new ReadjustFrequencyStatusCall__Inputs(this);
  }

  get outputs(): ReadjustFrequencyStatusCall__Outputs {
    return new ReadjustFrequencyStatusCall__Outputs(this);
  }
}

export class ReadjustFrequencyStatusCall__Inputs {
  _call: ReadjustFrequencyStatusCall;

  constructor(call: ReadjustFrequencyStatusCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReadjustFrequencyStatusCall__Outputs {
  _call: ReadjustFrequencyStatusCall;

  constructor(call: ReadjustFrequencyStatusCall) {
    this._call = call;
  }

  get status(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReadjustLiquidityCall extends ethereum.Call {
  get inputs(): ReadjustLiquidityCall__Inputs {
    return new ReadjustLiquidityCall__Inputs(this);
  }

  get outputs(): ReadjustLiquidityCall__Outputs {
    return new ReadjustLiquidityCall__Outputs(this);
  }
}

export class ReadjustLiquidityCall__Inputs {
  _call: ReadjustLiquidityCall;

  constructor(call: ReadjustLiquidityCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fee(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ReadjustLiquidityCall__Outputs {
  _call: ReadjustLiquidityCall;

  constructor(call: ReadjustLiquidityCall) {
    this._call = call;
  }
}

export class SetPilotProtocolDetailsCall extends ethereum.Call {
  get inputs(): SetPilotProtocolDetailsCall__Inputs {
    return new SetPilotProtocolDetailsCall__Inputs(this);
  }

  get outputs(): SetPilotProtocolDetailsCall__Outputs {
    return new SetPilotProtocolDetailsCall__Outputs(this);
  }
}

export class SetPilotProtocolDetailsCall__Inputs {
  _call: SetPilotProtocolDetailsCall;

  constructor(call: SetPilotProtocolDetailsCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pilotPercentage(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _status(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetPilotProtocolDetailsCall__Outputs {
  _call: SetPilotProtocolDetailsCall;

  constructor(call: SetPilotProtocolDetailsCall) {
    this._call = call;
  }
}

export class ToggleFeesInPilotCall extends ethereum.Call {
  get inputs(): ToggleFeesInPilotCall__Inputs {
    return new ToggleFeesInPilotCall__Inputs(this);
  }

  get outputs(): ToggleFeesInPilotCall__Outputs {
    return new ToggleFeesInPilotCall__Outputs(this);
  }
}

export class ToggleFeesInPilotCall__Inputs {
  _call: ToggleFeesInPilotCall;

  constructor(call: ToggleFeesInPilotCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ToggleFeesInPilotCall__Outputs {
  _call: ToggleFeesInPilotCall;

  constructor(call: ToggleFeesInPilotCall) {
    this._call = call;
  }
}

export class UniswapV3MintCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3MintCallbackCall__Inputs {
    return new UniswapV3MintCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3MintCallbackCall__Outputs {
    return new UniswapV3MintCallbackCall__Outputs(this);
  }
}

export class UniswapV3MintCallbackCall__Inputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }

  get amount0Owed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Owed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3MintCallbackCall__Outputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class UpdateCoreAddressesCall extends ethereum.Call {
  get inputs(): UpdateCoreAddressesCall__Inputs {
    return new UpdateCoreAddressesCall__Inputs(this);
  }

  get outputs(): UpdateCoreAddressesCall__Outputs {
    return new UpdateCoreAddressesCall__Outputs(this);
  }
}

export class UpdateCoreAddressesCall__Inputs {
  _call: UpdateCoreAddressesCall;

  constructor(call: UpdateCoreAddressesCall) {
    this._call = call;
  }

  get oracle_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ulmState_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get indexFund_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get uniStrategy_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class UpdateCoreAddressesCall__Outputs {
  _call: UpdateCoreAddressesCall;

  constructor(call: UpdateCoreAddressesCall) {
    this._call = call;
  }
}

export class UpdateNewPremiumCall extends ethereum.Call {
  get inputs(): UpdateNewPremiumCall__Inputs {
    return new UpdateNewPremiumCall__Inputs(this);
  }

  get outputs(): UpdateNewPremiumCall__Outputs {
    return new UpdateNewPremiumCall__Outputs(this);
  }
}

export class UpdateNewPremiumCall__Inputs {
  _call: UpdateNewPremiumCall;

  constructor(call: UpdateNewPremiumCall) {
    this._call = call;
  }

  get _premium(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateNewPremiumCall__Outputs {
  _call: UpdateNewPremiumCall;

  constructor(call: UpdateNewPremiumCall) {
    this._call = call;
  }
}

export class UpdatePositionTotalAmountsCall extends ethereum.Call {
  get inputs(): UpdatePositionTotalAmountsCall__Inputs {
    return new UpdatePositionTotalAmountsCall__Inputs(this);
  }

  get outputs(): UpdatePositionTotalAmountsCall__Outputs {
    return new UpdatePositionTotalAmountsCall__Outputs(this);
  }
}

export class UpdatePositionTotalAmountsCall__Inputs {
  _call: UpdatePositionTotalAmountsCall;

  constructor(call: UpdatePositionTotalAmountsCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePositionTotalAmountsCall__Outputs {
  _call: UpdatePositionTotalAmountsCall;

  constructor(call: UpdatePositionTotalAmountsCall) {
    this._call = call;
  }

  get fee0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get totalLiquidity(): BigInt {
    return this._call.outputValues[4].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get pilotToken(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get wethToken(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
