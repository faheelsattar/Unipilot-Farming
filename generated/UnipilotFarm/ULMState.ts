// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ULMState__getPoolDetailsResult {
  value0: Address;
  value1: Address;
  value2: i32;
  value3: i32;
  value4: BigInt;
  value5: BigInt;
  value6: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: i32,
    value3: i32,
    value4: BigInt,
    value5: BigInt,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromI32(this.value6));
    return map;
  }
}

export class ULMState__getPositionDetailsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: i32;
  value4: i32;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: i32,
    value4: i32,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromI32(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class ULMState__getTokensOwedAmountResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ULMState__getUserAndIndexSharesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ULMState extends ethereum.SmartContract {
  static bind(address: Address): ULMState {
    return new ULMState("ULMState", address);
  }

  getPoolAddress(token0: Address, token1: Address, fee: i32): Address {
    let result = super.call(
      "getPoolAddress",
      "getPoolAddress(address,address,uint24):(address)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fee))
      ]
    );

    return result[0].toAddress();
  }

  try_getPoolAddress(
    token0: Address,
    token1: Address,
    fee: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPoolAddress",
      "getPoolAddress(address,address,uint24):(address)",
      [
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fee))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolDetails(pool: Address): ULMState__getPoolDetailsResult {
    let result = super.call(
      "getPoolDetails",
      "getPoolDetails(address):(address,address,uint24,uint16,uint128,uint160,int24)",
      [ethereum.Value.fromAddress(pool)]
    );

    return new ULMState__getPoolDetailsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32()
    );
  }

  try_getPoolDetails(
    pool: Address
  ): ethereum.CallResult<ULMState__getPoolDetailsResult> {
    let result = super.tryCall(
      "getPoolDetails",
      "getPoolDetails(address):(address,address,uint24,uint16,uint128,uint160,int24)",
      [ethereum.Value.fromAddress(pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ULMState__getPoolDetailsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32()
      )
    );
  }

  getPositionDetails(
    tokenId: BigInt,
    liquidityManagerAddress: Address
  ): ULMState__getPositionDetailsResult {
    let result = super.call(
      "getPositionDetails",
      "getPositionDetails(uint256,address):(address,address,address,int24,uint24,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(liquidityManagerAddress)
      ]
    );

    return new ULMState__getPositionDetailsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_getPositionDetails(
    tokenId: BigInt,
    liquidityManagerAddress: Address
  ): ethereum.CallResult<ULMState__getPositionDetailsResult> {
    let result = super.tryCall(
      "getPositionDetails",
      "getPositionDetails(uint256,address):(address,address,address,int24,uint24,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(liquidityManagerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ULMState__getPositionDetailsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  getTokensOwedAmount(
    liquidityManager: Address,
    pool: Address,
    userLiquidity: BigInt,
    feeGrowth0: BigInt,
    feeGrowth1: BigInt
  ): ULMState__getTokensOwedAmountResult {
    let result = super.call(
      "getTokensOwedAmount",
      "getTokensOwedAmount(address,address,uint256,uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(liquidityManager),
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromUnsignedBigInt(userLiquidity),
        ethereum.Value.fromUnsignedBigInt(feeGrowth0),
        ethereum.Value.fromUnsignedBigInt(feeGrowth1)
      ]
    );

    return new ULMState__getTokensOwedAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getTokensOwedAmount(
    liquidityManager: Address,
    pool: Address,
    userLiquidity: BigInt,
    feeGrowth0: BigInt,
    feeGrowth1: BigInt
  ): ethereum.CallResult<ULMState__getTokensOwedAmountResult> {
    let result = super.tryCall(
      "getTokensOwedAmount",
      "getTokensOwedAmount(address,address,uint256,uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(liquidityManager),
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromUnsignedBigInt(userLiquidity),
        ethereum.Value.fromUnsignedBigInt(feeGrowth0),
        ethereum.Value.fromUnsignedBigInt(feeGrowth1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ULMState__getTokensOwedAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getUserAndIndexShares(
    _tokensOwed0: BigInt,
    _tokensOwed1: BigInt
  ): ULMState__getUserAndIndexSharesResult {
    let result = super.call(
      "getUserAndIndexShares",
      "getUserAndIndexShares(uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokensOwed0),
        ethereum.Value.fromUnsignedBigInt(_tokensOwed1)
      ]
    );

    return new ULMState__getUserAndIndexSharesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getUserAndIndexShares(
    _tokensOwed0: BigInt,
    _tokensOwed1: BigInt
  ): ethereum.CallResult<ULMState__getUserAndIndexSharesResult> {
    let result = super.tryCall(
      "getUserAndIndexShares",
      "getUserAndIndexShares(uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokensOwed0),
        ethereum.Value.fromUnsignedBigInt(_tokensOwed1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ULMState__getUserAndIndexSharesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  shouldReadjust(pool: Address, liquidityManagerAddress: Address): boolean {
    let result = super.call(
      "shouldReadjust",
      "shouldReadjust(address,address):(bool)",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromAddress(liquidityManagerAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_shouldReadjust(
    pool: Address,
    liquidityManagerAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldReadjust",
      "shouldReadjust(address,address):(bool)",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromAddress(liquidityManagerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GetPositionDetailsCall extends ethereum.Call {
  get inputs(): GetPositionDetailsCall__Inputs {
    return new GetPositionDetailsCall__Inputs(this);
  }

  get outputs(): GetPositionDetailsCall__Outputs {
    return new GetPositionDetailsCall__Outputs(this);
  }
}

export class GetPositionDetailsCall__Inputs {
  _call: GetPositionDetailsCall;

  constructor(call: GetPositionDetailsCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get liquidityManagerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetPositionDetailsCall__Outputs {
  _call: GetPositionDetailsCall;

  constructor(call: GetPositionDetailsCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get token0(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get token1(): Address {
    return this._call.outputValues[2].value.toAddress();
  }

  get currentTick(): i32 {
    return this._call.outputValues[3].value.toI32();
  }

  get fee(): i32 {
    return this._call.outputValues[4].value.toI32();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[5].value.toBigInt();
  }

  get fee0(): BigInt {
    return this._call.outputValues[6].value.toBigInt();
  }

  get fee1(): BigInt {
    return this._call.outputValues[7].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._call.outputValues[8].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[9].value.toBigInt();
  }

  get totalLiquidity(): BigInt {
    return this._call.outputValues[10].value.toBigInt();
  }
}

export class SetFeesPercentageIndexFundCall extends ethereum.Call {
  get inputs(): SetFeesPercentageIndexFundCall__Inputs {
    return new SetFeesPercentageIndexFundCall__Inputs(this);
  }

  get outputs(): SetFeesPercentageIndexFundCall__Outputs {
    return new SetFeesPercentageIndexFundCall__Outputs(this);
  }
}

export class SetFeesPercentageIndexFundCall__Inputs {
  _call: SetFeesPercentageIndexFundCall;

  constructor(call: SetFeesPercentageIndexFundCall) {
    this._call = call;
  }

  get newPercentage(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFeesPercentageIndexFundCall__Outputs {
  _call: SetFeesPercentageIndexFundCall;

  constructor(call: SetFeesPercentageIndexFundCall) {
    this._call = call;
  }
}
